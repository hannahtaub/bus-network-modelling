
README: Computer Science Large Practical
s1107836

Program runs on DICE machines with a Python 2.6 compiler.

To run program: cd into CSLP_repo in terminal, then type:
			    python bus_model.py <test_file_path>

To run a subset of the test files created to ensure proper breaking, instead of entering a file name, run: 
				python bus_model.py runalltests

The program can be run with a number of optional flags, entered into the console as:
				python bus_model.py <test_file_path> <flag 1> <flag 2, etc.>
			ex. python bus_model.py test/1routetest.txt -showstats
These flags include:
	-showstats: Show the statistics for average queueing time, number of missed passengers, average waiting passengers, and number of passengers per bus per road. If this is not activated, the output will only show the events from the scenario.
	-tofile: Send console output to a text file instead of the console. The output will appear in the file output.txt in the folder the program is being run in. 
	-showevents: If an experiment is being run, the events will not show up in the output by default. To add them back in, run an experiment with this flag.
	-runtests: This is different from an experiment, and cannot be run at the same time as an experiment (if this is attempted, the experiment will run, but not the tests). This flag runs various tests on the output, such as parsing for correctly-ordered leaving and arriving at stops.

Any errors in the parsing input will raise a ModelParseError exception and output a short message about what the parser thinks is wrong. If 'ignore warnings' is off, warnings will also raise a ModelParseError.

If an entry such as a road or a route is duplicated and 'ignore warnings' is included in the test file, the system will take the last of whichever values it is given. If 'ignore warnings' is off, the system will raise a ModelParseError.

For experiments being run, only the stats will be shown and they will always be shown regardless of whether the -showstats tag is used or not. However, these can still be sent to a file instead of the console with -tofile.

Optimising parameters will only work if there is an experiment to run it on. The optimal parameters will be sent to the console.

Extra credit: There is an option to vary the rate of new_passengers at different stops. Having the modifier 'new passengers' is still a requirement, but to change it at a specific stop, add a line with this template to your input file:
					enters <stop number> <new stop rate>
				ex. enters 1 2.0
Any stops with this will have this rate as their new rate of passengers. This has nothing to do with the rate that the new_passenger event is triggered. Instead, it affects the distribution of which stop passengers enter the simulation at. The default value is 1. To decrease the rate at which passengers enter at a certain stop, put a value less than 1. To increase it, put a value greater than 1. So, for example, a stop with value 0.5 would be selected only half as often as any one other stop with value 1.0.
This does not change the probability with which a passenger is assigned a particular destination.


